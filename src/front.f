C
C***********************************************************************
C                                                                      *
C            NACHOS II - A Finite Element Computer Program             *
C                        for Incompressible Flow Problems              *
C                                                                      *
C     Copyright (c) 1986,2019   National Technology & Engineering      *
C                               Solutions of Sandia, LLC (NTESS)       *
C                                                                      *
C                            All rights reserved.                      *
C                                                                      *
C     This software is distributed under the BSD 3-Clause License.     *
C                                                                      *
C***********************************************************************
C
      SUBROUTINE FRONT (IPTECV,ISVECV,NBLKS,NPIV,DET,                   
     1NK,INK,KROWV,LDEST,KDEST,LPIV,KPIV,LHED,KHED,ILHED,IKHED,IDISK,   
     2NRP,NCP,EQ,PVKOL1,QQ1,PVKOL2,QQ2,PVKOL3,QQ3,PVKOL4,QQ4,TEMP,R1,   
     3ECV,NCN,MDF,NOPP,NOP,LISTEL,UN,UPNP1,ACCN,SCRTCH,X,Y)
C
C     ******************************************************************
C
C     SUBROUTINE FOR THE FRONTAL SOLUTION OF AN UNSYMMETRIC SPARSE
C     MATRIX SYSTEM WITH PIVOTING
C
C     ORIGINAL CODE BY P.HOOD, UNIVERSITY OF WALES, SWANSEA,WALES, 1976.
C     PRESENT VERSION BY R.E.BENNER, SANDIA NATIONAL LABS, 1985.
C
C     ******************************************************************
C
      COMMON /TAPES/  NIN,NOUT,NTP0,NTP1,NTP2,NTP3,NTP4,NTP5,NTP6,NTP7, 
     1                NTP8,NTP9,NTP10,NTP11,NTP12,NTP13
      COMMON /SZDAT/  NUMEL,NUMNOD,NUMVAR,NUMDOF,NODSOL
      COMMON /PRBDAT/ IAXSYM,ITMDEP,IFORCE,IFREE,IVAR1,IVAR2,IPFUNC,    
     1                IPNLTY,PNLTY
      COMMON /ELMDAT/ NNELM(6),NNCOR(6),NNMID(6),NNCTR(6),NSIDET(5),    
     1                NSIDEQ(7),NNSIDE(6,4,3)
      COMMON /FRNT/   RPIVOT,SPIVOT,IRESOL,ISOLVE,NSUM,IPIVOT,MWGA
      COMMON /FRNTSZ/ MXFRNT,MXDOFE,MXBLKS,MXBUFF,LIWK,LRWK
C
      DIMENSION NK(*), INK(*), KROWV(*), LDEST(*), KDEST(*), LPIV(*)
      DIMENSION KPIV(*), LHED(*), KHED(*), ILHED(*), IKHED(*), IDISK(*)
      DIMENSION NRP(*), NCP(*)
      DIMENSION EQ(MXFRNT,*), PVKOL1(*), QQ1(*), PVKOL2(*), QQ2(*)
      DIMENSION PVKOL3(*), QQ3(*), PVKOL4(*), QQ4(*)
      DIMENSION TEMP(*), R1(*), ECV(*)
      DIMENSION NCN(*), MDF(*), NOPP(*), NOP(NUMEL,*), LISTEL(*)
      DIMENSION UN(NUMNOD,*), UPNP1(NUMNOD,*), ACCN(NUMNOD,*)
      DIMENSION SCRTCH(NUMNOD,*), X(*), Y(*)
      DIMENSION ESTIFM(50,50), EFV(50)
C
C     ******************************************************************
C
C     INITIALIZE PARAMETERS AND VECTORS
C
      LCOL=0
      KROW=0
      INCR=0
      NPIV=0
      DET=1.
      IFULPV=0
      DO 10 I=1,NUMDOF
      NRP(I)=0
      NCP(I)=0
      R1(I)=0.
   10 CONTINUE
      DO 20 I=1,MXFRNT
      DO 20 J=1,MXFRNT
      EQ(I,J)=0.
   20 CONTINUE
      NELL=0
C
C     ASSEMBLE EQUATIONS ELEMENT-BY-ELEMENT
C
   30 CONTINUE
      NELL=NELL+1
      NN=ABS(LISTEL(NELL))
      KIND=MOD(NN,100)
      NBN=NNELM(KIND)+IPFUNC
      IF (MWGA.NE.0) THEN
      DO 40 I=1,NBN
      NK(I)=NOP(NELL,I)
      INK(I)=ABS(NK(I))
   40 CONTINUE
       ELSE
      KC=0
      DO 50 J=1,NBN
      M=ABS(NOP(NELL,J))
      DO 50 L=1,MDF(M)
      KC=KC+1
      NK(KC)=NOPP(M)+L-1
      INK(KC)=NK(KC)
      IF (NOP(NELL,J).LT.0) NK(KC)=-NK(KC)
   50 CONTINUE
      END IF
C
C     CALL MATRIX ASSEMBLY ROUTINE
C
      CALL ASSMBL (NELL,ESTIFM,EFV,ISOLVE,NOP,LISTEL,UN,UPNP1,ACCN,     
     1SCRTCH,X,Y)
C
      LK0=1
      IF (KROW.EQ.0) THEN
      LCOL=1
      KROW=1
      LDEST(1)=1
      KDEST(1)=1
      LHED(1)=NK(1)
      KHED(1)=NK(1)
      ILHED(1)=INK(1)
      IKHED(1)=INK(1)
      LK0=2
      END IF
      NCNNEL=NCN(NELL)
      DO 60 LK=LK0,NCNNEL
      LL=ISRCHEQ(LCOL,ILHED,1,INK(LK))
      IF (LL.GT.LCOL) LCOL=LCOL+1
      LDEST(LK)=LL
      LHED(LL)=NK(LK)
      ILHED(LL)=INK(LK)
      KK=ISRCHEQ(KROW,IKHED,1,INK(LK))
      IF (KK.GT.KROW) KROW=KROW+1
      KDEST(LK)=KK
      KHED(KK)=NK(LK)
      IKHED(KK)=INK(LK)
   60 CONTINUE
      IF (KROW.GT.MXFRNT.OR.LCOL.GT.MXFRNT) THEN
      WRITE (NOUT, 240) NELL,MXFRNT,KROW,LCOL
      CALL ERROR ('FRONT','SEE PREVIOUS MESSAGE',' ',0,' ',0,' ',' ',1)
      END IF
C
C     ADD ELEMENT FORCE VECTOR AND STIFFNESS MATRIX TO
C     THE FRONTAL MATRIX
C
      DO 70 K=1,NCNNEL
      R1(INK(K))=R1(INK(K))+EFV(K)
   70 CONTINUE
      NCN4=4*(NCNNEL/4)
      DO 80 L=1,NCN4,4
      DO 80 K=1,NCNNEL
      EQ(KDEST(K),LDEST(L  ))=EQ(KDEST(K),LDEST(L  ))+ESTIFM(K,L  )
      EQ(KDEST(K),LDEST(L+1))=EQ(KDEST(K),LDEST(L+1))+ESTIFM(K,L+1)
      EQ(KDEST(K),LDEST(L+2))=EQ(KDEST(K),LDEST(L+2))+ESTIFM(K,L+2)
      EQ(KDEST(K),LDEST(L+3))=EQ(KDEST(K),LDEST(L+3))+ESTIFM(K,L+3)
   80 CONTINUE
      DO 90 L=NCN4+1,NCNNEL
      DO 90 K=1,NCNNEL
      EQ(KDEST(K),LDEST(L))=EQ(KDEST(K),LDEST(L))+ESTIFM(K,L)
   90 CONTINUE
C
C     IDENTIFY FULLY SUMMED EQUATIONS FOR ELIMINATION
C
  100 CONTINUE
      LC=0
      KR=0
      DO 110 L=1,LCOL
      IF (LHED(L).LT.0) THEN
      LC=LC+1
      LPIV(LC)=L
      END IF
      IF (KHED(L).LT.0) THEN
      KR=KR+1
      KPIV(KR)=L
      END IF
  110 CONTINUE
      IF (LC.LE.NSUM.AND.NELL.LT.NUMEL) GO TO 30
      IF (LC.LE.0) THEN
      WRITE (NOUT, 250) NELL,LC,NSUM
      CALL ERROR ('FRONT','SEE PREVIOUS MESSAGE',' ',0,' ',0,' ',' ',1)
      END IF
C
C     ELIMINATE FULLY SUMMED EQUATIONS ELEMENT-BY-ELEMENT;
C     ELIMINATE UP TO FOUR EQUATIONS DURING EACH PASS
C
      IPIV=0
C
C     FIND FIRST PIVOT
C
      CALL FNDPIV (IPIVOT,IFULPV,NELL,IPIV,NPIV,LC,KR,MXFRNT,NUMDOF,    
     1LPIV,KPIV,ILHED,IKHED,NRP,NCP,RPIVOT,SPIVOT,LPVCO1,KPVRO1,KRO1,   
     2PIVOT1,DET,PVKOL1,QQ1,PVKOL2,QQ2,PVKOL3,QQ3,EQ)
      R1(KRO1)=R1(KRO1)/PIVOT1
      DO 120 L=1,LCOL
      QQ1(L)=EQ(KPVRO1,L)/PIVOT1
      PVKOL1(L)=EQ(L,LPVCO1)
      TEMP(L)=-PVKOL1(L)*R1(KRO1)
  120 CONTINUE
      IF (NELL.LT.NUMEL.AND.LC.GT.NSUM .OR. NELL.EQ.NUMEL.AND.          
     1LC.GT.1) THEN
C
C     FIND SECOND PIVOT
C
      CALL FNDPIV (IPIVOT,IFULPV,NELL,IPIV,NPIV,LC,KR,MXFRNT,NUMDOF,    
     1LPIV,KPIV,ILHED,IKHED,NRP,NCP,RPIVOT,SPIVOT,LPVCO2,KPVRO2,KRO2,   
     2PIVOT2,DET,PVKOL1,QQ1,PVKOL2,QQ2,PVKOL3,QQ3,EQ)
      R1(KRO2)=(R1(KRO2)+TEMP(KPVRO2))/PIVOT2
      DO 130 L=1,LCOL
      QQ2(L)=(EQ(KPVRO2,L)-PVKOL1(KPVRO2)*QQ1(L))/PIVOT2
      PVKOL2(L)=EQ(L,LPVCO2)-PVKOL1(L)*QQ1(LPVCO2)
      TEMP(L)=TEMP(L)-PVKOL2(L)*R1(KRO2)
  130 CONTINUE
      IF (NELL.LT.NUMEL.AND.LC.GT.NSUM .OR. NELL.EQ.NUMEL.AND.          
     1LC.GT.1) THEN
C
C     FIND THIRD PIVOT
C
      CALL FNDPIV (IPIVOT,IFULPV,NELL,IPIV,NPIV,LC,KR,MXFRNT,NUMDOF,    
     1LPIV,KPIV,ILHED,IKHED,NRP,NCP,RPIVOT,SPIVOT,LPVCO3,KPVRO3,KRO3,   
     2PIVOT3,DET,PVKOL1,QQ1,PVKOL2,QQ2,PVKOL3,QQ3,EQ)
      R1(KRO3)=(R1(KRO3)+TEMP(KPVRO3))/PIVOT3
      DO 140 L=1,LCOL
      QQ3(L)=(EQ(KPVRO3,L)-PVKOL1(KPVRO3)*QQ1(L)-                       
     1PVKOL2(KPVRO3)*QQ2(L))/PIVOT3
      PVKOL3(L)=EQ(L,LPVCO3)-PVKOL1(L)*QQ1(LPVCO3)-                     
     1PVKOL2(L)*QQ2(LPVCO3)
      TEMP(L)=TEMP(L)-PVKOL3(L)*R1(KRO3)
  140 CONTINUE
      IF (NELL.LT.NUMEL.AND.LC.GT.NSUM .OR. NELL.EQ.NUMEL.AND.          
     1LC.GT.1) THEN
C
C     FIND FOURTH PIVOT
C
      CALL FNDPIV (IPIVOT,IFULPV,NELL,IPIV,NPIV,LC,KR,MXFRNT,NUMDOF,    
     1LPIV,KPIV,ILHED,IKHED,NRP,NCP,RPIVOT,SPIVOT,LPVCO4,KPVRO4,KRO4,   
     2PIVOT4,DET,PVKOL1,QQ1,PVKOL2,QQ2,PVKOL3,QQ3,EQ)
      R1(KRO4)=(R1(KRO4)+TEMP(KPVRO4))/PIVOT4
      DO 150 L=1,LCOL
      QQ4(L)=(EQ(KPVRO4,L)-PVKOL1(KPVRO4)*QQ1(L)-                       
     1PVKOL2(KPVRO4)*QQ2(L)-PVKOL3(KPVRO4)*QQ3(L))/PIVOT4
      PVKOL4(L)=EQ(L,LPVCO4)-PVKOL1(L)*QQ1(LPVCO4)-                     
     1PVKOL2(L)*QQ2(LPVCO4)-PVKOL3(L)*QQ3(LPVCO4)
      TEMP(L)=TEMP(L)-PVKOL4(L)*R1(KRO4)
  150 CONTINUE
      END IF
      END IF
      END IF
C
C     ELIMINATE FOUR FULLY SUMMED EQUATIONS ...
C
      IF (IPIV.EQ.4) THEN
      TEMP(KPVRO1)=0.
      TEMP(KPVRO2)=0.
      TEMP(KPVRO3)=0.
      TEMP(KPVRO4)=0.
      DO 170 K=1,KROW
      IF (PVKOL1(K).NE.0. .OR.PVKOL2(K).NE.0. .OR.                      
     1 PVKOL3(K).NE.0. .OR.PVKOL4(K).NE.0.) THEN
      R1(IKHED(K))=R1(IKHED(K))+TEMP(K)
      DO 160 L=1,LCOL
      EQ(K,L)=EQ(K,L)-PVKOL1(K)*QQ1(L)-PVKOL2(K)*QQ2(L)-PVKOL3(K)*QQ3(L)
     1-PVKOL4(K)*QQ4(L)
  160 CONTINUE
      END IF
  170 CONTINUE
C
C     ELIMINATE THREE FULLY SUMMED EQUATIONS
C
      ELSE IF (IPIV.EQ.3) THEN
      TEMP(KPVRO1)=0.
      TEMP(KPVRO2)=0.
      TEMP(KPVRO3)=0.
      DO 190 K=1,KROW
      IF (PVKOL1(K).NE.0. .OR. PVKOL2(K).NE.0. .OR.                     
     1 PVKOL3(K).NE.0.) THEN
      R1(IKHED(K))=R1(IKHED(K))+TEMP(K)
      DO 180 L=1,LCOL
      EQ(K,L)=EQ(K,L)-PVKOL1(K)*QQ1(L)-PVKOL2(K)*QQ2(L)-PVKOL3(K)*QQ3(L)
  180 CONTINUE
      END IF
  190 CONTINUE
C
C     ELIMINATE TWO FULLY SUMMED EQUATIONS
C
      ELSE IF (IPIV.EQ.2) THEN
      TEMP(KPVRO1)=0.
      TEMP(KPVRO2)=0.
      DO 210 K=1,KROW
      IF (PVKOL1(K).NE.0. .OR. PVKOL2(K).NE.0.) THEN
      R1(IKHED(K))=R1(IKHED(K))+TEMP(K)
      DO 200 L=1,LCOL
      EQ(K,L)=EQ(K,L)-PVKOL1(K)*QQ1(L)-PVKOL2(K)*QQ2(L)
  200 CONTINUE
      END IF
  210 CONTINUE
C
C     ELIMINATE ONE FULLY SUMMED EQUATION
C
      ELSE IF (IPIV.EQ.1) THEN
      TEMP(KPVRO1)=0.
      DO 230 K=1,KROW
      IF (PVKOL1(K).NE.0.) THEN
      R1(IKHED(K))=R1(IKHED(K))+TEMP(K)
      DO 220 L=1,LCOL
      EQ(K,L)=EQ(K,L)-PVKOL1(K)*QQ1(L)
  220 CONTINUE
      END IF
  230 CONTINUE
      END IF
C
C     SAVE SETS OF DATA NEEDED FOR BACKSUBSTITUTION OR RESOLUTION
C     IN "ECV" (PIVOTAL ROWS AND COLUMNS OF THE FRONTAL MATRIX AND
C     ASSOCIATED HEADING VECTORS)
C
C     SAVE THE FIRST PIVOTAL SET
C
      CALL DISKWR (IRESOL,MXBLKS,MXFRNT,MXBUFF,NBLKS,                   
     1 KROW,LCOL,KRO1,KPVRO1,LPVCO1,IPTECV,PIVOT1,ILHED,IKHED,LHED,KHED,
     2 IDISK,QQ1,PVKOL1,EQ,ECV)
      INCR=INCR+1
      KROWV(INCR)=KROW
      IF (IPIV.GT.1) THEN
      QQ2(LPVCO1)=QQ2(KROW)
      PVKOL2(KPVRO1)=PVKOL2(KROW)
      IF (KPVRO2.EQ.KROW) KPVRO2=KPVRO1
      IF (LPVCO2.EQ.KROW) LPVCO2=LPVCO1
      IF (IPIV.GT.2) THEN
      QQ3(LPVCO1)=QQ3(KROW)
      PVKOL3(KPVRO1)=PVKOL3(KROW)
      IF (KPVRO3.EQ.KROW) KPVRO3=KPVRO1
      IF (LPVCO3.EQ.KROW) LPVCO3=LPVCO1
      IF (IPIV.GT.3) THEN
      QQ4(LPVCO1)=QQ4(KROW)
      PVKOL4(KPVRO1)=PVKOL4(KROW)
      IF (KPVRO4.EQ.KROW) KPVRO4=KPVRO1
      IF (LPVCO4.EQ.KROW) LPVCO4=LPVCO1
      END IF
      END IF
      KROW=KROW-1
      LCOL=LCOL-1
C
C     SAVE THE SECOND PIVOTAL SET
C
      CALL DISKWR (IRESOL,MXBLKS,MXFRNT,MXBUFF,                         
     1 NBLKS,KROW,LCOL,KRO2,KPVRO2,LPVCO2,IPTECV,PIVOT2,ILHED,IKHED,    
     2 LHED,KHED,IDISK,QQ2,PVKOL2,EQ,ECV)
      INCR=INCR+1
      KROWV(INCR)=KROW
      IF (IPIV.GT.2) THEN
      QQ3(LPVCO2)=QQ3(KROW)
      PVKOL3(KPVRO2)=PVKOL3(KROW)
      IF (KPVRO3.EQ.KROW) KPVRO3=KPVRO2
      IF (LPVCO3.EQ.KROW) LPVCO3=LPVCO2
      IF (IPIV.GT.3) THEN
      QQ4(LPVCO2)=QQ4(KROW)
      PVKOL4(KPVRO2)=PVKOL4(KROW)
      IF (KPVRO4.EQ.KROW) KPVRO4=KPVRO2
      IF (LPVCO4.EQ.KROW) LPVCO4=LPVCO2
      END IF
      KROW=KROW-1
      LCOL=LCOL-1
C
C     SAVE THE THIRD PIVOTAL SET
C
      CALL DISKWR (IRESOL,MXBLKS,MXFRNT,MXBUFF,                         
     1 NBLKS,KROW,LCOL,KRO3,KPVRO3,LPVCO3,IPTECV,PIVOT3,ILHED,          
     2 IKHED,LHED,KHED,IDISK,QQ3,PVKOL3,EQ,ECV)
      INCR=INCR+1
      KROWV(INCR)=KROW
      IF (IPIV.GT.3) THEN
      QQ4(LPVCO3)=QQ4(KROW)
      PVKOL4(KPVRO3)=PVKOL4(KROW)
      IF (KPVRO4.EQ.KROW) KPVRO4=KPVRO3
      IF (LPVCO4.EQ.KROW) LPVCO4=LPVCO3
      KROW=KROW-1
      LCOL=LCOL-1
C
C     SAVE THE FOURTH PIVOTAL SET
C
      CALL DISKWR (IRESOL,MXBLKS,MXFRNT,MXBUFF,                         
     1 NBLKS,KROW,LCOL,KRO4,KPVRO4,LPVCO4,IPTECV,PIVOT4,ILHED,          
     2 IKHED,LHED,KHED,IDISK,QQ4,PVKOL4,EQ,ECV)
      INCR=INCR+1
      KROWV(INCR)=KROW
      END IF
      END IF
      END IF
      KROW=KROW-1
      LCOL=LCOL-1
C
C     DETERMINE WHETHER TO ASSEMBLE, ELIMINATE OR BACKSUBSTITUTE
C
      IF (KROW.GT.1.OR.NELL.LT.NUMEL) GO TO 100
      IF (ABS(EQ(1,1)).LT.SPIVOT) THEN
      WRITE (NOUT, 260) NELL,IKHED(1),ILHED(1),EQ(1,1)
      CALL ERROR ('FRONT','SEE PREVIOUS MESSAGE',' ',0,' ',0,' ',' ',1)
      END IF
C
C     SAVE LAST EQUATION IN THE FRONTAL MATRIX
C
      DET=DET*EQ(1,1)
      R1(IKHED(1))=R1(IKHED(1))/EQ(1,1)
      QQ1(1)=1.0
      KRO1=IKHED(1)
      LPVCO1=1
      PIVOT1=EQ(1,1)
      KPVRO1=1
      CALL DISKWR (IRESOL,MXBLKS,MXFRNT,MXBUFF,NBLKS,                   
     1 KROW,LCOL,KRO1,KPVRO1,LPVCO1,IPTECV,PIVOT1,ILHED,IKHED,LHED,KHED,
     2 IDISK,QQ1,PVKOL1,EQ,ECV)
C
C     IF RESOLUTION IS DESIRED, SAVE THE LAST SECTION OF "ECV" ON DISK
C
      IF (NBLKS.GT.0.AND.IPTECV.GT.1) THEN
      NBLKS=NBLKS+1
      IF (NBLKS.GT.MXBLKS) THEN
      WRITE (NOUT, 270) MXBLKS
      CALL ERROR ('FRONT','SEE PREVIOUS MESSAGE',' ',0,' ',0,' ',' ',1)
      END IF
C
C     THE FOLLOWING BUFFERED OUTPUT STATEMENT MAY BE REPLACED WITH A
C     WRITE STATEMENT OF THE FORM
C     WRITE (NTP10) (ECV(II),II=1,IPTECV-1)
C     ALSO, THE FOLLOWING UNIT STATEMENT SHOULD BE REMOVED IF BUFFERED
C     OUTPUT IS NOT USED
C
c      BUFFER OUT (NTP10,0) (ECV(1),ECV(IPTECV-1))
      WRITE (NTP10) (ECV(II),II=1,IPTECV-1)
      IDISK(NBLKS)=IPTECV-1
      IPTECV=1
c      IF (UNIT(NTP10).GT.0.) CALL ERROR ('FRONT','ERROR IN BUFFER OUT OP
c     1ERATION',' ',0,' ',0,' ',' ',1)
      END IF
      INCR=INCR+1
      KROWV(INCR)=1
      ISVECV=IPTECV
C
      RETURN
C
  240 FORMAT (/,10X,'ERROR IN THE DETERMINATION OF THE MAX FRONT WIDTH',
     1/,10X,'INSUFFICIENT STORAGE FOR MAX FRONT',/,10X,'ELEMENT = ',I5, 
     25X,'MXFRNT = ',I5,5X,'KROW = ',I5,5X,'LCOL = ',I5)
  250 FORMAT (/,10X,'NO MORE FULLY SUMMED EQUATIONS',/,10X,'POSSIBLE CON
     1NECTIVITY PROBLEM',/,10X,'ELEMENT = ',I5,5X,'LC = ',I5,5X,        
     2'NSUM = ',I5)
  260 FORMAT (/,10X,'MATRIX IS SINGULAR OR ILL CONDITIONED',/,10X,      
     1'ELEMENT = ',I5,5X,'KRO = ',I5,5X,'LCO = ',I5,5X,'PIVOT = ',E15.7)
  270 FORMAT (/,10X,'MAXIMUM NUMBER OF DISK BLOCK TRANSFERS EXCEEDED',  
     1/,10X,'MXBLKS = ',I5)
      END
