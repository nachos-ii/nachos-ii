C
C***********************************************************************
C                                                                      *
C            NACHOS II - A Finite Element Computer Program             *
C                        for Incompressible Flow Problems              *
C                                                                      *
C     Copyright (c) 1986,2019   National Technology & Engineering      *
C                               Solutions of Sandia, LLC (NTESS)       *
C                                                                      *
C                            All rights reserved.                      *
C                                                                      *
C     This software is distributed under the BSD 3-Clause License.     *
C                                                                      *
C***********************************************************************
C
      SUBROUTINE SOLVE (X,Y,ICON,LISTEL,LISTND,UN,UPNP1,ACCN,SCRTCH,    
     1NCN,MDF,NOPP,IWK,RWK)
C
C     ******************************************************************
C
C     SUBROUTINE TO DIRECT THE SOLUTION OF THE FINITE ELEMENT EQUATIONS
C     VIA A FRONTAL SOLUTION METHOD
C
C     ******************************************************************
C
C     -THE FRONTAL METHOD USED HERE IS A HIGHLY MODIFIED VERSION OF
C      HOOD'S PROCEDURE AS PUBLISHED IN INT.J.NUM.METH.ENGRNG.
C      (VOL 10,P379-399,1976, VOL 11,P1055,1977)
C      THE PRESENT VERSION WAS DEVELOPED BY R.E.BENNER AT SANDIA
C      NATIONAL LABS, 1985.
C
C     -SOLUTION ALGORITHMS:
C        I)  STEADY STATE PROBLEMS
C           * SUCCESSIVE SUBSTITUTION METHOD (PICARD)
C           * NEWTON'S METHOD
C           * QUASI-NEWTON METHOD (NOT IMPLEMENTED IN THIS VERSION)
C
C        II) TRANSIENT PROBLEMS
C           * PREDICTOR-CORRECTOR METHOD (FORWARD/BACKWARD EULER)
C           * PREDICTOR-CORRECTOR METHOD (ADAMS-BASHFORTH/TRAPEZOID)
C
C     -FOR COUPLED PROBLEMS THE FLUID MECHANICS AND TRANSPORT
C      EQUATIONS ARE SOLVED CONCURRENTLY
C
C     ******************************************************************
C
      CHARACTER*10 CDATA
C
      COMMON /INDATR/ RDATA(150)
      COMMON /INDATI/ IDATA(150)
      COMMON /INDATC/ CDATA(150)
      COMMON /TAPES/  NIN,NOUT,NTP0,NTP1,NTP2,NTP3,NTP4,NTP5,NTP6,NTP7, 
     1                NTP8,NTP9,NTP10,NTP11,NTP12,NTP13
      COMMON /RSTART/ IRSTRT,NSTEPS
      COMMON /SZDAT/  NUMEL,NUMNOD,NUMVAR,NUMDOF,NODSOL
      COMMON /LMTDAT/ MAXELM,MAXNOD,MAXBC,MAXEDG,MAXMAT,MAXNPT,MAXPLT,  
     1                MAXBRY,MAXBLK
      COMMON /MATDAT/ NMAT,NPROP,PROP(15,10),NXMAT,NXPROP,XPROP(15,10)
      COMMON /PRBDAT/ IAXSYM,ITMDEP,IFORCE,IFREE,IVAR1,IVAR2,IPFUNC,    
     1                IPNLTY,PNLTY
      COMMON /ELMDAT/ NNELM(6),NNCOR(6),NNMID(6),NNCTR(6),NSIDET(5),    
     1                NSIDEQ(7),NNSIDE(6,4,3)
      COMMON /SPTDAT/ ISPT,NSPT,NELSPT(50),PTS(50,2),SPTVAL(50,6)
      COMMON /GAUSS1/ GSPT1(4),GSPT2(4)
      COMMON /HAMMR1/ HAMPT1(3),HAMPT2(3)
      COMMON /SLNDAT/ IALGOR,IBLDUV,IBLDT,IJACOB,IAUTO,NCYCLM,          
     1                NPRNT,KSTEP,KPRNT,TIME,DELTN,DELTNM
      COMMON /FRNT/   RPIVOT,SPIVOT,IRESOL,ISOLVE,NSUM,IPIVOT,MWGA
      COMMON /FRNTSZ/ MXFRNT,MXDOFE,MXBLKS,MXBUFF,LIWK,LRWK
      COMMON /NORM/   UMAX,VMAX,TMAX,V1MAX,V2MAX
      COMMON /ANORM/  ANRMU,ANRMV,ANRMUV,ANRMT,ANRMX1,ANRMX2
      COMMON /BNORM/  BNRMU,BNRMV,BNRMUV,BNRMT,BNRMX1,BNRMX2
C
      DIMENSION ICON(NUMEL,*), LISTEL(*), LISTND(*), X(*), Y(*)
      DIMENSION UN(NUMNOD,*), UPNP1(NUMNOD,*), ACCN(NUMNOD,*)
      DIMENSION SCRTCH(NUMNOD,*)
      DIMENSION NCN(*), MDF(*), NOPP(*)
      DIMENSION IWK(*), RWK(*)
      DIMENSION SPTQD(4), TPTQD(4), SPTTR(3), TPTTR(3)
      DIMENSION UNINT(6)
C
      DATA (SPTQD(I),I=1,4)/-.57735026,.57735026,.57735026,-.57735026/
      DATA (TPTQD(I),I=1,4)/-.57735026,-.57735026,.57735026,.57735026/
      DATA (SPTTR(I),I=1,3)/.73333333,.13333333,.13333333/
      DATA (TPTTR(I),I=1,3)/.13333333,.73333333,.13333333/
      DATA NGAUSS/2/,NHAM/3/
      DATA CUTOFF/1.0E-15/
C
C     ******************************************************************
C
C     ********** ALLOCATE STORAGE IN WORK ARRAYS IWK,RWK **********
C
C     IWK(NI1)          =         NK(1:MXDOFE)
C     IWK(NI2)          =         INK(1:MXDOFE)
C     IWK(NI3)          =         KROWV(1:NUMDOF)
C     IWK(NI4)          =         LDEST(1:MXDOFE)
C     IWK(NI5)          =         KDEST(1:MXDOFE)
C     IWK(NI6)          =         LPIV(1:MXFRNT)
C     IWK(NI7)          =         KPIV(1:MXFRNT)
C     IWK(NI8)          =         LHED(1:MXFRNT)
C     IWK(NI9)          =         KHED(1:MXFRNT)
C     IWK(NI10)         =         ILHED(1:MXFRNT)
C     IWK(NI11)         =         IKHED(1:MXFRNT)
C     IWK(NI12)         =         IDISK(1:MXBLKS)
C     IWK(NI13)         =         NRP(1:NUMDOF)
C     IWK(NI14)         =         NCP(1:NUMDOF)
C
      NI1=1
      NI2=NI1+MXDOFE
      NI3=NI2+MXDOFE
      NI4=NI3+NUMDOF
      NI5=NI4+MXDOFE
      NI6=NI5+MXDOFE
      NI7=NI6+MXFRNT
      NI8=NI7+MXFRNT
      NI9=NI8+MXFRNT
      NI10=NI9+MXFRNT
      NI11=NI10+MXFRNT
      NI12=NI11+MXFRNT
      NI13=NI12+MXBLKS
      NI14=NI13+NUMDOF
C
C     RWK(NR1)          =         EQ(1:MXFRNT,1:MXFRNT)
C     RWK(NR2)          =         PVKOL1(1:MXFRNT)
C     RWK(NR3)          =         QQ1(1:MXFRNT)
C     RWK(NR4)          =         PVKOL2(1:MXFRNT)
C     RWK(NR5)          =         QQ2(1:MXFRNT)
C     RWK(NR6)          =         PVKOL3(1:MXFRNT)
C     RWK(NR7)          =         QQ3(1:MXFRNT)
C     RWK(NR8)          =         PVKOL4(1:MXFRNT)
C     RWK(NR9)          =         QQ4(1:MXFRNT)
C     RWK(NR10)         =         TEMP(1:MXFRNT)
C     RWK(NR11)         =         SK(1:NUMDOF)
C     RWK(NR12)         =         R1(1:NUMDOF)
C     RWK(NR13)         =         ECV(1:MXBUFF)
C
C     NOTE: * ARRAYS ARE ONLY REQUIRED FOR QUASI-NEWTON ALGORITHM
C
      NR1=1
      NR2=NR1+MXFRNT**2
      NR3=NR2+MXFRNT
      NR4=NR3+MXFRNT
      NR5=NR4+MXFRNT
      NR6=NR5+MXFRNT
      NR7=NR6+MXFRNT
      NR8=NR7+MXFRNT
      NR9=NR8+MXFRNT
      NR10=NR9+MXFRNT
      NR11=NR10+MXFRNT
      NR12=NR11+NUMDOF
      NR13=NR12+NUMDOF
C
C     PRINT STORAGE REQUIREMENTS
C
      MNBUFF=MXFRNT*4+4
      IF (IFORCE+IFREE.EQ.0) WRITE (NOUT, 440) NUMEL,NUMNOD,NUMDOF,     
     1NUMVAR,MAXNPT,MXDOFE,MXFRNT,MNBUFF,MXBUFF
      IF (IFORCE+IFREE.EQ.1) WRITE (NOUT, 450) NUMEL,NUMNOD,NUMDOF,     
     1NUMVAR,MAXNPT,MXDOFE,MXFRNT,MNBUFF,MXBUFF
C
C     **********   READ AND STORE SOLUTION PARAMETERS   **********
C
      CALL RDFFLD (NIN,RDATA,IDATA,CDATA)
      IF (CDATA(1).EQ.'STEADY    ') GO TO 10
      IF (CDATA(1).EQ.'TRANSIENT ') GO TO 20
      CALL ERROR ('SOLVE','UNRECOGNIZED SOLVE COMMAND',' ',0,' ',0,     
     1'WORD',CDATA(1),1)
C
C     STEADY STATE SOLUTION CONTROLS
C
   10 CONTINUE
      ITMDEP=0
      IALGOR=2
      IF (CDATA(2).EQ.'PICARD    ') IALGOR=1
      IF (CDATA(2).EQ.'NEWTON    ') IALGOR=2
      IF (CDATA(2).EQ.'QNEWTON   ') IALGOR=3
      ACCF=RDATA(3)
      IF (IALGOR.EQ.3) ACCF=0.
      NCYCLM=IDATA(4)
      IF (NCYCLM.EQ.0) NCYCLM=10
      NPRNT=IDATA(5)
      IF (NPRNT.EQ.0) NPRNT=1
      TOLU=RDATA(6)
      TOLT=RDATA(7)
      TOLX1=RDATA(8)
      TOLX2=RDATA(9)
      IF (CDATA(6).EQ.' ') TOLU=1.0E-5
      IF (CDATA(7).EQ.' ') TOLT=1.0E-5
      IF (CDATA(8).EQ.' ') TOLX1=1.0E-5
      IF (CDATA(9).EQ.' ') TOLX2=1.0E-5
      WRITE (NOUT, 370) CDATA(2),ACCF,NCYCLM,TOLU,TOLT,TOLX1,TOLX2,NPRNT
      TIME=0.
      DELTN=0.
      DELTNM=0.
      GO TO 30
C
C     TRANSIENT SOLUTION CONTROLS
C
   20 CONTINUE
      ITMDEP=1
      IALGOR=2
      IF (CDATA(2).EQ.'EULER     ') IALGOR=1
      IF (CDATA(2).EQ.'TRAPEZOID ') IALGOR=2
      IAUTO=0
      IF (CDATA(3).EQ.'FIXSTEP   ') IAUTO=0
      IF (CDATA(3).EQ.'AUTOSTEP  ') IAUTO=1
      TOLT=RDATA(4)
      IF (TOLT.EQ.0.AND.IAUTO.EQ.1) TOLT=.001
      TINT=RDATA(5)
      TFINAL=RDATA(6)
      DELTN=RDATA(7)
      DELTNM=DELTN
      NCYCLM=IDATA(8)
      IF (NCYCLM.EQ.0) NCYCLM=1000
      TOLU=RDATA(9)
      IF (CDATA(9).EQ.' ') TOLU=1.0E-5
      NPRNT=IDATA(10)
      IF (NPRNT.EQ.0) NPRNT=1
      DELTMN=RDATA(11)
      DELTMX=RDATA(12)
      IF (DELTMX.EQ.0.0) DELTMX=10000.
      WRITE (NOUT, 380) CDATA(2),CDATA(3),TOLT,TINT,TFINAL,DELTN,       
     1 DELTMN,DELTMX,NCYCLM,TOLU,NPRNT
      TIME=TINT
   30 CONTINUE
      ITYPE=1
      IF (IFORCE.EQ.1) ITYPE=2
      IF (IFREE.EQ.1) ITYPE=3
C
C     SET INITIAL CONDITIONS
C
      IF (IRSTRT.EQ.1) THEN
      DO 40 N=1,NSTEPS
      READ (NTP13, END=50) TIME,NUMNOD,NUMVAR,((UN(I,J),I=1,NUMNOD),    
     1 J=1,NUMVAR)
      WRITE (NTP9) TIME,NUMNOD,NUMVAR,((UN(I,J),I=1,NUMNOD),            
     1 J=1,NUMVAR)
   40 CONTINUE
      REWIND (NTP13)
      IF (ITMDEP.EQ.0) REWIND (NTP9)
      GO TO 60
   50 CONTINUE
      WRITE (NOUT, 390) NSTEPS,N
   60 CONTINUE
      WRITE (NOUT, 400)
       ELSE
      UVINT=0.
      WRITE (NOUT, 410)
      DO 70 I=1,NMAT
      WRITE (NOUT, 420) I,PROP(12,I),UVINT,XPROP(6,I),XPROP(12,I)
   70 CONTINUE
      DO 90 N=1,NUMEL
      NN=ABS(LISTEL(N))
      MAT=NN/100
      KIND=MOD(NN,100)
      NN=NNELM(KIND)
      UNINT(1)=UVINT
      UNINT(2)=UVINT
      UNINT(3)=UVINT
      UNINT(4)=PROP(12,MAT)
      UNINT(5)=XPROP(6,MAT)
      UNINT(6)=XPROP(12,MAT)
      DO 80 I=1,NN
      INODE=ABS(ICON(N,I))
      DO 80 J=1,NUMVAR
      UN(INODE,J)=UNINT(J)
   80 CONTINUE
   90 CONTINUE
      IF (ISPT.EQ.1) CALL SPOINT (ITYPE,LISTEL,ICON,UN)
      END IF
      DO 100 I=1,NUMNOD
      DO 100 J=1,NUMVAR
      UPNP1(I,J)=0.
      ACCN(I,J)=0.
      SCRTCH(I,J)=0.
  100 CONTINUE
      IF (IRSTRT.EQ.1) GO TO 110
      REWIND (NTP9)
      IF (ITMDEP.EQ.0) GO TO 110
      WRITE (NTP9) TIME,NUMNOD,NUMVAR,((UN(I,J),I=1,NUMNOD),J=1,NUMVAR)
      IF (ISPT.EQ.1) WRITE (NTP6) TIME,NSPT,NUMVAR,((SPTVAL(I,J),I=1,   
     1NSPT),J=1,NUMVAR)
  110 CONTINUE
      TIME=TIME+DELTN
      WRITE (NOUT, 430)
C
C     EVALUATE SHAPE FUNCTIONS FOR COMPUTATION OF DEFORMATION GRADIENTS
C
      CALL FLUX6 (3,HAMPT1,HAMPT2)
      CALL FLUX8 (4,GSPT1,GSPT2)
      CALL FLUX9 (4,GSPT1,GSPT2)
C
C     **********   SET CONTROLS FOR SOLUTION ALGORITHMS   **********
C
      IF (ITMDEP.EQ.1) GO TO 150
      GO TO (120, 130, 140), IALGOR
  120 CONTINUE
      IRESOL=0
      ISOLVE=0
      IJACOB=0
      IBLDUV=1
      IBLDT=0
      IF (IFORCE+IFREE.EQ.1) IBLDT=1
      GO TO 180
  130 CONTINUE
      IRESOL=0
      ISOLVE=0
      IJACOB=1
      IBLDUV=1
      IBLDT=0
      IF (IFORCE+IFREE.EQ.1) IBLDT=1
      GO TO 180
  140 CONTINUE
      IRESOL=0
      ISOLVE=0
      IJACOB=1
      IBLDUV=1
      IBLDT=0
      IF (IFORCE+IFREE.EQ.1) IBLDT=1
      GO TO 180
  150 CONTINUE
      GO TO (160, 170), IALGOR
  160 CONTINUE
      IRESOL=0
      ISOLVE=0
      IJACOB=0
      IBLDUV=1
      IBLDT=0
      IF (IFORCE+IFREE.EQ.1) IBLDT=1
      GO TO 180
  170 CONTINUE
      IRESOL=0
      ISOLVE=0
      IJACOB=1
      IBLDUV=1
      IBLDT=0
      IF (IFORCE+IFREE.EQ.1) IBLDT=1
  180 CONTINUE
      KCYCLE=1
      KSTEP=1
      KPRNT=1
      MWGA=0
C
C     **********   COMPUTE SOLUTION FOR EACH CYCLE   **********
C
  190 CONTINUE
      REWIND (NTP3)
      REWIND (NTP4)
C
      CALL PREDCT (ITMDEP,KSTEP,IALGOR,DELTN,DELTNM,UN,UPNP1,ACCN,      
     1SCRTCH)
C
      IF (ISOLVE.EQ.0) THEN
      IPTECV=1
      NBLKS=0
      END IF
      CALL FRONT (IPTECV,ISVECV,NBLKS,NPIV,DET,                         
     1IWK(NI1),IWK(NI2),IWK(NI3),IWK(NI4),IWK(NI5),IWK(NI6),IWK(NI7),   
     2IWK(NI8),IWK(NI9),IWK(NI10),IWK(NI11),IWK(NI12),IWK(NI13),        
     3IWK(NI14),RWK(NR1),RWK(NR2),RWK(NR3),RWK(NR4),RWK(NR5),RWK(NR6),  
     4RWK(NR7),RWK(NR8),RWK(NR9),RWK(NR10),RWK(NR12),RWK(NR13),         
     5NCN,MDF,NOPP,ICON,LISTEL,UN,UPNP1,ACCN,SCRTCH,X,Y)
C
C     BACK SUBSTITUTION
C
      NBLKSV=NBLKS
      NBLKST=NBLKS
      CALL BCKSUB (IRESOL,NBLKST,IPTECV,IWK(NI3),IWK(NI10),IWK(NI12),   
     1RWK(NR3),RWK(NR10),RWK(NR11),RWK(NR12),RWK(NR13))
      IF (IRESOL.EQ.1) ISOLVE=1
C
C     EXTRACT SOLUTION FROM GLOBAL DOF VECTOR
C
      CALL EXTRCT (X,Y,MDF,NOPP,LISTEL,LISTND,ICON,RWK(NR11),SCRTCH)
C
C     APPLY RELAXATION FACTOR TO SOLUTION VECTOR
C
      IF (ITMDEP.EQ.0) CALL RELAX (KSTEP,ACCF,UN,SCRTCH)
C
C     COMPUTE NORMS AND EXTREMES FOR SOLUTION
C
      CALL SNORM (ITYPE,KSTEP,TIME,LISTEL,ICON,UN,SCRTCH)
      IF (ITMDEP.EQ.1) CALL TNORM (ITYPE,UPNP1,SCRTCH)
C
C     UPDATE SOLUTION VECTORS, COMPUTE ACCELERATIONS, ETC
C
      CALL UPDATE (KSTEP,IALGOR,DELTN,UN,ACCN,SCRTCH)
C
C     COMPUTE SOLUTION AT SPECIAL POINTS, IF REQUIRED
C
      IF (ISPT.EQ.1) CALL SPOINT (ITYPE,LISTEL,ICON,UN)
C
C     PRINT SOLUTION, IF REQUIRED
C
      DO 200 I=1,NUMVAR
      DO 200 II=1,NUMNOD
      IF (ABS(UN(II,I)).LT.CUTOFF) UN(II,I)=0.
  200 CONTINUE
      IF (KPRNT.EQ.NPRNT) CALL OUTPUT (ITYPE,LISTEL,ICON,UN)
C
C     **********   TEST FOR END OF SOLUTION PROCEDURE **********
C
      IF (ITMDEP.EQ.1) GO TO 230
C
C     STEADY-STATE SOLUTIONS
C
      IF (IFORCE+IFREE.EQ.1) GO TO 210
C
C     ISOTHERMAL FLOWS
C
      IF (KCYCLE.EQ.NCYCLM) GO TO 220
      IF (ANRMUV.LE.TOLU) THEN
      IF (KPRNT.EQ.NPRNT) GO TO 220
      CALL OUTPUT (ITYPE,LISTEL,ICON,UN)
      GO TO 220
      END IF
      KCYCLE=KCYCLE+1
      KSTEP=KSTEP+1
      IF (KPRNT.EQ.NPRNT) KPRNT=0
      KPRNT=KPRNT+1
      GO TO 190
C
C     NON-ISOTHERMAL FLOWS (COUPLED EQUATIONS)
C
  210 CONTINUE
      IF (KCYCLE.EQ.NCYCLM) GO TO 220
      IF (ANRMUV.LE.TOLU.AND.ANRMT.LE.TOLT.AND.ANRMX1.LE.TOLX1.AND.     
     1ANRMX2.LE.TOLX2) THEN
      IF (KPRNT.EQ.NPRNT) GO TO 220
      CALL OUTPUT (ITYPE,LISTEL,ICON,UN)
      GO TO 220
      END IF
      KCYCLE=KCYCLE+1
      KSTEP=KSTEP+1
      IF (KPRNT.EQ.NPRNT) KPRNT=0
      KPRNT=KPRNT+1
      GO TO 190
C
  220 CONTINUE
      WRITE (NTP9) TIME,NUMNOD,NUMVAR,((UN(I,J),I=1,NUMNOD),J=1,NUMVAR)
      IF (ISPT.EQ.1) WRITE (NTP6) TIME,NSPT,NUMVAR,((SPTVAL(I,J),       
     1I=1,NSPT),J=1,NUMVAR)
      GO TO 260
C
C     TRANSIENT SOLUTIONS
C
  230 CONTINUE
      IF (IFORCE+IFREE.EQ.1) GO TO 240
C
C     ISOTHERMAL FLOWS
C
      IF (KCYCLE.EQ.NCYCLM.OR.TIME.GE.TFINAL) GO TO 250
      IF (ANRMUV.LE.TOLU) THEN
      IF (KPRNT.EQ.NPRNT) GO TO 250
      CALL OUTPUT (ITYPE,LISTEL,ICON,UN)
      GO TO 250
      END IF
      WRITE (NTP9) TIME,NUMNOD,NUMVAR,((UN(I,J),I=1,NUMNOD),J=1,NUMVAR)
      IF (ISPT.EQ.1) WRITE (NTP6) TIME,NSPT,NUMVAR,((SPTVAL(I,J),       
     1I=1,NSPT),J=1,NUMVAR)
      IF (IAUTO.EQ.1) CALL TSTEP (ITYPE,KSTEP,IALGOR,TOLT,DELTN,DELTNM, 
     1DELTMN,DELTMX)
      TIME=TIME+DELTN
      KCYCLE=KCYCLE+1
      KSTEP=KSTEP+1
      IF (KPRNT.EQ.NPRNT) KPRNT=0
      KPRNT=KPRNT+1
      GO TO 190
C
C     NON-ISOTHERMAL FLOWS (COUPLED EQUATIONS)
C
  240 CONTINUE
      IF (KCYCLE.EQ.NCYCLM.OR.TIME.GE.TFINAL) GO TO 250
      IF (ANRMUV.LE.TOLU.AND.ANRMT.LE.TOLU.AND.ANRMX1.LE.TOLU.AND.      
     1ANRMX2.LE.TOLU) THEN
      IF (KPRNT.EQ.NPRNT) GO TO 250
      CALL OUTPUT (ITYPE,LISTEL,ICON,UN)
      GO TO 250
      END IF
      WRITE (NTP9) TIME,NUMNOD,NUMVAR,((UN(I,J),I=1,NUMNOD),J=1,NUMVAR)
      IF (ISPT.EQ.1) WRITE (NTP6) TIME,NSPT,NUMVAR,((SPTVAL(I,J),       
     1I=1,NSPT),J=1,NUMVAR)
      IF (IAUTO.EQ.1) CALL TSTEP (ITYPE,KSTEP,IALGOR,TOLT,DELTN,DELTNM, 
     1DELTMN,DELTMX)
      TIME=TIME+DELTN
      KCYCLE=KCYCLE+1
      KSTEP=KSTEP+1
      IF (KPRNT.EQ.NPRNT) KPRNT=0
      KPRNT=KPRNT+1
      GO TO 190
C
  250 CONTINUE
      WRITE (NTP9) TIME,NUMNOD,NUMVAR,((UN(I,J),I=1,NUMNOD),J=1,NUMVAR)
      IF (ISPT.EQ.1) WRITE (NTP6) TIME,NSPT,NUMVAR,((SPTVAL(I,J),       
     1I=1,NSPT),J=1,NUMVAR)
C
C     **********   CHECK FOR ADDITIONAL SOLUTION COMMANDS   **********
C
  260 CONTINUE
      CALL RDFFLD (NIN,RDATA,IDATA,CDATA)
      IF (CDATA(1).EQ.'END       ') GO TO 340
      IF (CDATA(1).EQ.'STEADY    ') GO TO 270
      IF (CDATA(1).EQ.'TRANSIENT ') GO TO 310
      CALL ERROR ('SOLVE','COMMAND OR END CARD MISSING',' ',0,' ',0,    
     1'WORD',CDATA(1),1)
      GO TO 340
C
C     RESET STEADY-STATE SOLUTION PARAMETERS
C
  270 CONTINUE
      ITMDEP=0
      IALGOR=2
      IF (CDATA(2).EQ.'PICARD    ') IALGOR=1
      IF (CDATA(2).EQ.'NEWTON    ') IALGOR=2
      IF (CDATA(2).EQ.'QNEWTON   ') IALGOR=3
      ACCF=RDATA(3)
      IF (IALGOR.EQ.3) ACCF=0.
      NCYCLM=IDATA(4)
      IF (NCYCLM.EQ.0) NCYCLM=10
      NPRNT=IDATA(5)
      IF (NPRNT.EQ.0) NPRNT=1
      TOLU=RDATA(6)
      TOLT=RDATA(7)
      TOLX1=RDATA(8)
      TOLX2=RDATA(9)
      IF (CDATA(6).EQ.' ') TOLU=1.0E-5
      IF (CDATA(7).EQ.' ') TOLT=1.0E-5
      IF (CDATA(8).EQ.' ') TOLX1=1.0E-5
      IF (CDATA(9).EQ.' ') TOLX2=1.0E-5
      TIME=0.
      DELTN=0
      DELTNM=0.
      KCYCLE=1
      KSTEP=KSTEP+1
      KPRNT=1
      WRITE (NOUT, 370) CDATA(2),ACCF,NCYCLM,TOLU,TOLT,TOLX1,TOLX2,NPRNT
      WRITE (NOUT, 430)
      REWIND (NTP9)
      IF (ISPT.EQ.1) REWIND (NTP6)
      GO TO (280, 290, 300), IALGOR
  280 CONTINUE
      IJACOB=0
      IBLDUV=1
      IBLDT=0
      IF (IFORCE+IFREE.EQ.1) IBLDT=1
      GO TO 190
  290 CONTINUE
      IJACOB=1
      IBLDUV=1
      IBLDT=0
      IF (IFORCE+IFREE.EQ.1) IBLDT=1
      GO TO 190
  300 CONTINUE
      IJACOB=1
      IBLDUV=1
      IBLDT=0
      IF (IFORCE+IFREE.EQ.1) IBLDT=1
      GO TO 190
C
C     RESET TRANSIENT SOLUTION PARAMETERS
C
  310 CONTINUE
      ITMDEP=1
      IALGOR=2
      IF (CDATA(2).EQ.'EULER     ') IALGOR=1
      IF (CDATA(2).EQ.'TRAPEZOID ') IALGOR=2
      IAUTO=0
      IF (CDATA(3).EQ.'FIXSTEP   ') IAUTO=0
      IF (CDATA(3).EQ.'AUTOSTEP  ') IAUTO=1
      TOLT=RDATA(4)
      IF (TOLT.EQ.0.AND.IAUTO.EQ.1) TOLT=.001
      TINT=TIME
      TFINAL=RDATA(6)
      IF (IAUTO.EQ.1) THEN
      CALL TSTEP (ITYPE,KSTEP,IALGOR,TOLT,DELTN,DELTNM,                 
     1DELTMN,DELTMX)
       ELSE
      DELTN=RDATA(7)
      DELTNM=DELTN
      END IF
      NCYCLM=IDATA(8)
      IF (NCYCLM.EQ.0) NCYCLM=1000
      TOLU=RDATA(9)
      IF (CDATA(9).EQ.' ') TOLU=1.0E-5
      NPRNT=IDATA(10)
      IF (NPRNT.EQ.0) NPRNT=1
      DELTMN=RDATA(11)
      DELTMX=RDATA(12)
      WRITE (NOUT, 380) CDATA(2),CDATA(3),TOLT,TINT,TFINAL,DELTN,       
     1 DELTMN,DELTMX,NCYCLM,TOLU,NPRNT
      WRITE (NOUT, 430)
      TIME=TIME+DELTN
      KCYCLE=1
      KSTEP=KSTEP+1
      KPRNT=1
      GO TO (320, 330), IALGOR
  320 CONTINUE
      IRESOL=0
      ISOLVE=0
      IJACOB=0
      IBLDUV=1
      IBLDT=0
      IF (IFORCE+IFREE.EQ.1) IBLDT=1
      GO TO 190
  330 CONTINUE
      IRESOL=0
      ISOLVE=0
      IJACOB=1
      IBLDUV=1
      IBLDT=0
      IF (IFORCE+IFREE.EQ.1) IBLDT=1
      GO TO 190
  340 CONTINUE
      ITOTAL=ISVECV
      DO 350 I=1,NBLKSV
      ITOTAL=ITOTAL+IWK(NI12+I-1)
  350 CONTINUE
      WRITE (NOUT, 460) NBLKSV,ITOTAL,MXBUFF
C
      DO 360 I=1,NUMEL
      DO 360 J=1,MAXNPT
      ICON(I,J)=ABS(ICON(I,J))
  360 CONTINUE
      RETURN
C
  370 FORMAT ('1',//,3X,'SOLUTION OF THE STEADY STATE PROBLEM---',//,   
     110X,'ITERATIVE SOLUTION PROCEDURE-'A10,/,10X,'ITERATIVE ACCELERATI
     2ON FACTOR-',E15.7,/,10X,'MAXIMUM NUMBER OF ITERATIONS-'           
     3,I5,/,10X,'CONVERGENCE TOLERANCE FOR VELOCITY SOLUTION-'          
     4,E15.7,/,10X,'CONVERGENCE TOLERANCE FOR TEMPERATURE SOLUTION-',   
     5E15.7,/,10X,'CONVERGENCE TOLERANCE FOR 1ST AUXILIARY SOLUTION-',  
     6E15.6,/,10X,'CONVERGENCE TOLERANCE FOR 2ND AUXILIARY SOLUTION-',  
     7E15.7,/,10X,'NUMBER OF ITERATIONS BETWEEN PRINTOUT-'I5)
  380 FORMAT ('1',//,3X,'SOLUTION FOR TRANSIENT PROBLEM---',//,10X,     
     1'TRANSIENT SOLUTION PROCEDURE-'A10,/,10X,'TIME STEP SELECTION OPTI
     2ON-'A10,/,10X,'ERROR TOLERANCE FOR TIME STEP SELECTION-',E15.7,   
     3/,10X,'INITIAL TIME-'E15.7,/,10X,'FINAL TIME-'E15.7,/,10X,        
     4'INITIAL TIME STEP-'E15.7,/,10X,'MINIMUM ALLOWABLE TIME STEP-',   
     5E15.7,/,10X,'MAXIMUM ALLOWABLE TIME STEP-',E15.7,/,10X,'MAXIMUM NU
     6MBER OF TIME STEPS ALLOWED-'I5,/,10X,'CRITERION FOR DECLARING A ST
     7EADY-STATE-',E15.7,/,10X,'NUMBER OF TIME STEPS BETWEEN PRINTOUT-' 
     8I5)
  390 FORMAT (//,3X,'INITIAL CONDITIONS REQUESTED AT TIMEPLANE 'I4,     
     1' ON NTAPE9',/,3X,'E-O-F ENCOUNTERED AT TIMEPLANE 'I4,/,3X,       
     2'INITIAL CONDITIONS ARE SET FROM LAST AVAILABLE TIMEPLANE')
  400 FORMAT (//,3X,'INITIAL CONDITIONS ARE SET FROM AN INPUT FILE (UNIT
     1 23)')
  410 FORMAT (//,3X,'INITIAL CONDITIONS ARE SET BY MATERIAL WITH THE FOL
     1LLOWING VALUES-',//)
  420 FORMAT (10X,'MATERIAL NO.-'I2,2X,'INITIAL TEMPERATURE-'E15.7,2X,  
     1'INITIAL VELOCITY  -'E15.7,/,27X,'INITIAL VARIABLE 1 -'E15.7,2X,  
     2'INITIAL VARIABLE 2-'E15.7)
  430 FORMAT (///,2X,'**************************************************
     1******************************************************************
     2**************',//,2X,'*******************************************
     3******************************************************************
     4*********************',//)
  440 FORMAT (//,3X,'PROPERTIES OF MATRIX SYSTEM : NAVIER-STOKES EQNS ',
     1//,10X,'NUMBER OF ELEMENTS --',I7,/,10X,'NUMBER OF NODES --',I7,/,
     210X,'NUMBER OF DEGREES OF FREEDOM (U,V,P) --',I7,/,10X,'MAXIMUM NU
     3MBER OF VARIABLES AT A NODE --',I5,/,10X,'MAXIMUM NODES IN AN ELEM
     4ENT --',I5,/,10X,'MAXIMUM DEGREES OF FREEDOM IN AN ELEMENT --',I5,
     5/,10X,'MAXIMUM FRONT WIDTH --',I5,/,10X,'MINIMUM BUFFER SPACE REQU
     6IRED BY SOLVER --',I10,/,10X,'BUFFER SPACE AVAILABLE TO SOLVER --'
     7,I10)
  450 FORMAT (//,3X,'PROPERTIES OF MATRIX SYSTEM : NAVIER-STOKES AND TRA
     1NSPORT EQNS ',//,10X,'NUMBER OF ELEMENTS --',I7,/,10X,'NUMBER OF N
     2ODES --',I7,/,10X,'NUMBER OF DEGREES OF FREEDOM (U,V,P,T,...) --',
     3I7,/,10X,'MAXIMUM NUMBER OF VARIABLES AT A NODE --',I5,/,10X,'MAXI
     4MUM NODES IN AN ELEMENT --',I5,/,10X,'MAXIMUM DEGREES OF FREEDOM I
     5N AN ELEMENT --',I5,/,10X,'MAXIMUM FRONT WIDTH --',I5,/,10X,'MINIM
     6UM BUFFER SPACE REQUIRED BY SOLVER --',I10,/,10X,'BUFFER SPACE AVA
     7ILABLE TO SOLVER --',I10)
  460 FORMAT (//,3X,'NUMBER OF BUFFER WRITES REQUIRED (NBLKS) - ',I5,/, 
     13X,'TOTAL BUFFER TRANSFER - ',I10,/,3X,'MAXIMUM BUFFER SIZE - ',  
     2I10)
      END
